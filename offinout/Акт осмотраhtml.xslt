<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2011 rel. 2 (http://www.altova.com) by TeaM DJiNN (TeaM DJiNN) -->
<!--Designed and generated by Altova StyleVision Enterprise Edition 2011 rel. 2 - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="#all">
	<xsl:output version="4.0" method="html" indent="no" encoding="UTF-8" use-character-maps="spaces" doctype-public="-//W3C//DTD&#32;HTML&#32;4.01&#32;Transitional//EN" doctype-system="http://www.w3.org/TR/html4/loose.dtd"/>
	<xsl:character-map name="spaces">
		<xsl:output-character character=" " string="&amp;nbsp;"/>
	</xsl:character-map>
	<xsl:param name="SV_OutputFormat" select="&apos;HTML&apos;"/>
	<xsl:param name="SV_BaseOutputFileName" as="xs:string?">
		<xsl:sequence select="for&#32;$i&#32;in&#32;altovaext:get-base-output-uri(),&#32;$j&#32;in&#32;tokenize(&#32;$i,&#32;&apos;[/\\]&apos;&#32;)[last()]&#32;return&#32;replace(&#32;$j,&#32;&apos;\.[^\.\s#%;]*$&apos;,&#32;&apos;&apos;&#32;)" use-when="function-available(&apos;altovaext:get-base-output-uri&apos;)"/>
	</xsl:param>
	<xsl:param name="SV_GeneratedFileNamePrefix" select="if&#32;(&#32;$SV_BaseOutputFileName&#32;)&#32;then&#32;$SV_BaseOutputFileName&#32;else&#32;&apos;Акт&#32;осмотра&apos;" as="xs:string?"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:import-schema schema-location="Акт&#32;осмотра.xsd"/>
	<xsl:template match="/">
		<xsl:call-template name="altova:Root"/>
	</xsl:template>
	<xsl:template name="altova:Root">
		<html>
			<head>
				<meta name="generator" content="Altova&#32;StyleVision&#32;Enterprise&#32;Edition&#32;2011&#32;rel.&#32;2&#32;(http://www.altova.com)"/>
				<meta http-equiv="X-UA-Compatible" content="IE=7"/>
				<xsl:comment>[if IE]&gt;&lt;STYLE type="text/css"&gt;.altova-rotate-left-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3)} .altova-rotate-right-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1)} &lt;/STYLE&gt;&lt;![endif]</xsl:comment>
				<xsl:comment>[if !IE]&gt;&lt;!</xsl:comment>
				<style type="text/css">.altova-rotate-left-textbox{-webkit-transform: rotate(-90deg) translate(-100%, 0%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(-90deg) translate(-100%, 0%); -moz-transform-origin: 0% 0%}.altova-rotate-right-textbox{-webkit-transform: rotate(90deg) translate(0%, -100%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(90deg) translate(0%, -100%); -moz-transform-origin: 0% 0%}</style>
				<xsl:comment>&lt;![endif]</xsl:comment>
				<style type="text/css">@page { margin-left:0.60in; margin-right:0.60in; margin-top:0.79in; margin-bottom:0.79in } @media print { br.altova-page-break { page-break-before: always; } }</style>
			</head>
			<body>
				<div style="position:&#32;relative">
					<div style="height:9.420000in;&#32;overflow:hidden;&#32;position:relative;&#32;width:7.300000in;&#32;">
						<xsl:comment>[if IE]&gt;&lt;v:line style="height:0; left:0; position:absolute; top:0; width:0;" from="0,0" to="0,0"&gt;&lt;/v:line&gt;&lt;![endif]</xsl:comment>
						<div style="font-family:@Arial&#32;Unicode&#32;MS;&#32;font-size:small;&#32;font-style:normal;&#32;font-variant:normal;&#32;font-weight:normal;&#32;height:0.21in;&#32;left:4.20in;&#32;overflow:hidden;&#32;padding:2px;&#32;position:absolute;&#32;top:0.20in;&#32;width:2.18in;&#32;">
							<xsl:for-each select="$XML"/>
						</div>
						<div style="height:0.22in;&#32;left:1.60in;&#32;overflow:hidden;&#32;padding:2px;&#32;position:absolute;&#32;top:0.60in;&#32;width:1.81in;&#32;">
							<xsl:for-each select="$XML"/>
						</div>
						<div style="height:0.77in;&#32;left:0in;&#32;overflow:hidden;&#32;padding:2px;&#32;position:absolute;&#32;top:1.40in;&#32;width:9.55in;&#32;">
							<xsl:variable name="altova:table">
								<table border="1">
									<xsl:variable name="altova:CurrContextGrid_0D8485F8" select="."/>
									<xsl:variable name="altova:ColumnData">
										<altova:Internal/>
									</xsl:variable>
									<thead>
										<tr>
											<th>
												<span>
													<xsl:text>Номер_позиции</xsl:text>
												</span>
											</th>
											<th>
												<span>
													<xsl:text>Наименование_детали</xsl:text>
												</span>
											</th>
											<th>
												<span>
													<xsl:text>Код_детали</xsl:text>
												</span>
											</th>
											<th>
												<span>
													<xsl:text>Цена_руб</xsl:text>
												</span>
											</th>
											<th>
												<span>
													<xsl:text>Тип_ремонта</xsl:text>
												</span>
											</th>
										</tr>
									</thead>
									<tbody>
										<xsl:for-each select="$XML">
											<xsl:for-each select="Калькуляцияремонта">
												<xsl:for-each select="Замена">
													<tr>
														<td>
															<xsl:for-each select="Номер_позиции">
																<xsl:apply-templates/>
															</xsl:for-each>
														</td>
														<td>
															<xsl:for-each select="Наименование_детали">
																<xsl:apply-templates/>
															</xsl:for-each>
														</td>
														<td>
															<xsl:for-each select="Код_детали">
																<xsl:apply-templates/>
															</xsl:for-each>
														</td>
														<td>
															<xsl:for-each select="Цена_руб">
																<xsl:apply-templates/>
															</xsl:for-each>
														</td>
														<td>
															<xsl:for-each select="Тип_ремонта">
																<xsl:apply-templates/>
															</xsl:for-each>
														</td>
													</tr>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</tbody>
								</table>
							</xsl:variable>
							<xsl:variable name="altova:col-count" select="sum(&#32;for&#32;$altova:cell&#32;in&#32;$altova:table/table/(thead&#32;|&#32;tbody&#32;|&#32;tfoot)[&#32;1&#32;]/tr[&#32;1&#32;]/(th&#32;|&#32;td)&#32;return&#32;altova:col-span(&#32;$altova:cell&#32;)&#32;)"/>
							<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for&#32;$altova:pos&#32;in&#32;1&#32;to&#32;$altova:col-count&#32;return&#32;true()"/>
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
							</xsl:apply-templates>
						</div>
						<div style="height:0.77in;&#32;left:0in;&#32;overflow:hidden;&#32;padding:2px;&#32;position:absolute;&#32;top:2.80in;&#32;width:8.92in;&#32;">
							<xsl:variable name="altova:table">
								<table border="1">
									<xsl:variable name="altova:CurrContextGrid_0DAAA920" select="."/>
									<xsl:variable name="altova:ColumnData">
										<altova:Internal/>
									</xsl:variable>
									<thead>
										<tr>
											<th>
												<span>
													<xsl:text>Наименование_детали</xsl:text>
												</span>
											</th>
											<th>
												<span>
													<xsl:text>Номер_позиции</xsl:text>
												</span>
											</th>
											<th>
												<span>
													<xsl:text>Тип_ремонта</xsl:text>
												</span>
											</th>
											<th>
												<span>
													<xsl:text>Время_ремонта_час</xsl:text>
												</span>
											</th>
										</tr>
									</thead>
									<tbody>
										<xsl:for-each select="$XML">
											<xsl:for-each select="Калькуляцияремонта">
												<xsl:for-each select="Ремонт">
													<tr>
														<td>
															<xsl:for-each select="Наименование_детали">
																<xsl:apply-templates/>
															</xsl:for-each>
														</td>
														<td>
															<xsl:for-each select="Номер_позиции">
																<xsl:apply-templates/>
															</xsl:for-each>
														</td>
														<td>
															<xsl:for-each select="Тип_ремонта">
																<xsl:apply-templates/>
															</xsl:for-each>
														</td>
														<td>
															<xsl:for-each select="Время_ремонта_час">
																<xsl:apply-templates/>
															</xsl:for-each>
														</td>
													</tr>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</tbody>
								</table>
							</xsl:variable>
							<xsl:variable name="altova:col-count" select="sum(&#32;for&#32;$altova:cell&#32;in&#32;$altova:table/table/(thead&#32;|&#32;tbody&#32;|&#32;tfoot)[&#32;1&#32;]/tr[&#32;1&#32;]/(th&#32;|&#32;td)&#32;return&#32;altova:col-span(&#32;$altova:cell&#32;)&#32;)"/>
							<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for&#32;$altova:pos&#32;in&#32;1&#32;to&#32;$altova:col-count&#32;return&#32;true()"/>
							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
							</xsl:apply-templates>
						</div>
					</div>
				</div>
			</body>
		</html>
	</xsl:template>
	<xsl:function name="altova:is-cell-empty" as="xs:boolean">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="altova:is-node-empty(&#32;$altova:cell&#32;)"/>
	</xsl:function>
	<xsl:function name="altova:is-node-empty" as="xs:boolean">
		<xsl:param name="altova:node" as="element()"/>
		<xsl:sequence select="every&#32;$altova:child&#32;in&#32;$altova:node/child::node()&#32;satisfies&#32;(&#32;(&#32;boolean(&#32;$altova:child/self::text()&#32;)&#32;and&#32;string-length(&#32;$altova:child&#32;)&#32;=&#32;0&#32;)&#32;or&#32;(&#32;(&#32;boolean(&#32;$altova:child/self::div&#32;)&#32;or&#32;boolean(&#32;$altova:child/self::span&#32;)&#32;or&#32;boolean(&#32;$altova:child/self::a&#32;)&#32;)&#32;and&#32;altova:is-node-empty(&#32;$altova:child&#32;)&#32;)&#32;)"/>
	</xsl:function>
	<xsl:function name="altova:col-span" as="xs:integer">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="if&#32;(&#32;exists(&#32;$altova:cell/@colspan&#32;)&#32;)&#32;then&#32;xs:integer(&#32;$altova:cell/@colspan&#32;)&#32;else&#32;1"/>
	</xsl:function>
	<xsl:template match="@*&#32;|&#32;node()" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:copy>
			<xsl:apply-templates select="@*&#32;|&#32;node()" mode="#current">
				<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
			</xsl:apply-templates>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="tbody" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:choose>
			<xsl:when test="empty(tr)">
				<xsl:copy>
					<tr>
						<td/>
					</tr>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@*&#32;|&#32;node()" mode="#current">
						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
					</xsl:apply-templates>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="th&#32;|&#32;td" mode="altova:generate-table">
		<xsl:choose>
			<xsl:when test="altova:is-cell-empty(&#32;.&#32;)">
				<xsl:copy>
					<xsl:apply-templates select="@*" mode="#current"/>
					<xsl:text> </xsl:text>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@*&#32;|&#32;node()" mode="#current"/>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:function name="altova:GetChartYValuesForSingleSeries">
		<xsl:param name="seqCategoryLeafPos" as="node()*"/>
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:for-each select="$seqCategoryLeafPos">
			<xsl:element name="altova:Value">
				<xsl:value-of select="altova:GetChartYValueForSingleSeriesPos($nodeSeriesLeafPos,&#32;.,&#32;$bValuesInCategory)"/>
			</xsl:element>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="altova:GetChartYValueForSingleSeriesPos">
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="nodeCategoryLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:variable name="altova:seqCategoryContextIds" select="$nodeCategoryLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:seqSeriesContextIds" select="$nodeSeriesLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:sCommonContextId" select="for&#32;$i&#32;in&#32;$altova:seqCategoryContextIds&#32;return&#32;if&#32;(some&#32;$j&#32;in&#32;$altova:seqSeriesContextIds&#32;satisfies&#32;$i&#32;eq&#32;$j)&#32;then&#32;$i&#32;else&#32;()" as="xs:string*"/>
		<xsl:choose>
			<xsl:when test="count($altova:sCommonContextId)&#32;gt&#32;1">
				<xsl:message select="concat(&apos;XBRL&#32;Chart:&#32;Error:&#32;Found&#32;several&#32;values&#32;instead&#32;of&#32;a&#32;single&#32;one&#32;(contexts:&#32;&apos;,&#32;string-join($altova:sCommonContextId,&#32;&apos;,&#32;&apos;),&#32;&apos;).&apos;)" terminate="yes"/>
			</xsl:when>
			<xsl:when test="count($altova:sCommonContextId)&#32;lt&#32;1">
				<xsl:message select="concat(&apos;XBRL&#32;Chart:&#32;Info:&#32;No&#32;value&#32;found&#32;for&#32;position&#32;labeled&#32;&quot;&apos;,&#32;$nodeCategoryLeafPos/@altova:sLabel,&#32;&apos;&quot;&apos;)" terminate="no"/>
				<xsl:sequence select="&apos;altova:no-value&apos;"/>
			</xsl:when>
			<xsl:when test="$bValuesInCategory">
				<xsl:sequence select="xs:string($nodeCategoryLeafPos/altova:Context[@altova:ContextId&#32;eq&#32;$altova:sCommonContextId]/@altova:Value)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="xs:string($nodeSeriesLeafPos/altova:Context[@altova:ContextId&#32;eq&#32;$altova:sCommonContextId]/@altova:Value)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:GetChartLabelForPos" as="xs:string">
		<xsl:param name="nodeParam" as="node()"/>
		<xsl:value-of select="string-join($nodeParam/ancestor-or-self::altova:Pos/@altova:sLabel,&#32;&apos;&#32;&apos;)"/>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-pixel" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength,&#32;&apos;px&apos;)">
				<xsl:value-of select="substring-before($normLength,&#32;&apos;px&apos;)"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength,&#32;&apos;in&apos;)">
				<xsl:value-of select="xs:decimal(substring-before($normLength,&#32;&apos;in&apos;))&#32;*&#32;$altova:nPxPerIn"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength,&#32;&apos;cm&apos;)">
				<xsl:value-of select="xs:decimal(substring-before($normLength,&#32;&apos;cm&apos;))&#32;*&#32;$altova:nPxPerIn&#32;div&#32;2.54"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength,&#32;&apos;mm&apos;)">
				<xsl:value-of select="xs:decimal(substring-before($normLength,&#32;&apos;mm&apos;))&#32;*&#32;$altova:nPxPerIn&#32;div&#32;25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength,&#32;&apos;pt&apos;)">
				<xsl:value-of select="xs:decimal(substring-before($normLength,&#32;&apos;pt&apos;))&#32;*&#32;$altova:nPxPerIn&#32;div&#32;72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength,&#32;&apos;pc&apos;)">
				<xsl:value-of select="xs:decimal(substring-before($normLength,&#32;&apos;pc&apos;))&#32;*&#32;$altova:nPxPerIn&#32;div&#32;6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$normLength"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:convert-length-to-mm" as="xs:decimal">
		<xsl:param name="altova:length"/>
		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>
		<xsl:choose>
			<xsl:when test="ends-with($normLength,&#32;&apos;px&apos;)">
				<xsl:value-of select="xs:decimal(substring-before($normLength,&#32;&apos;px&apos;))&#32;div&#32;$altova:nPxPerIn&#32;*&#32;25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength,&#32;&apos;in&apos;)">
				<xsl:value-of select="xs:decimal(substring-before($normLength,&#32;&apos;in&apos;))&#32;*&#32;25.4"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength,&#32;&apos;cm&apos;)">
				<xsl:value-of select="xs:decimal(substring-before($normLength,&#32;&apos;cm&apos;))&#32;*&#32;10"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength,&#32;&apos;mm&apos;)">
				<xsl:value-of select="substring-before($normLength,&#32;&apos;mm&apos;)&#32;"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength,&#32;&apos;pt&apos;)">
				<xsl:value-of select="xs:decimal(substring-before($normLength,&#32;&apos;pt&apos;))&#32;*&#32;25.4&#32;div&#32;72.0"/>
			</xsl:when>
			<xsl:when test="ends-with($normLength,&#32;&apos;pc&apos;)">
				<xsl:value-of select="xs:decimal(substring-before($normLength,&#32;&apos;pc&apos;))&#32;*&#32;25.4&#32;div&#32;6.0"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="number($normLength)&#32;div&#32;$altova:nPxPerIn&#32;*&#32;25.4"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
</xsl:stylesheet>
